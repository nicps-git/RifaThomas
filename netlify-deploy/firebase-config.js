// Configura√ß√£o do Firebase para Rifa Thomas - Vers√£o corrigida
// Firebase v9 compat para uso como script tradicional (n√£o m√≥dulo)

// Configura√ß√£o do Firebase com API Key correta
const firebaseConfig = {
  apiKey: "AIzaSyDtB1YfeOLWm6_xH1pI8mXJzO-IxIC4vHc",
  authDomain: "rifa-cha-thomas.firebaseapp.com",
  projectId: "rifa-cha-thomas",
  storageBucket: "rifa-cha-thomas.firebasestorage.app",
  messagingSenderId: "761618695276",
  appId: "1:761618695276:web:bf72f84cbbf5026fa74449"
};

console.log('üîÑ Carregando Firebase...');

// Aguardar Firebase v9 compat estar dispon√≠vel
function waitForFirebase() {
  return new Promise((resolve, reject) => {
    let attempts = 0;
    const maxAttempts = 50;
    
    const check = () => {
      if (typeof firebase !== 'undefined') {
        console.log('‚úÖ Firebase compat carregado');
        resolve();
      } else if (attempts >= maxAttempts) {
        reject(new Error('Timeout: Firebase n√£o carregou'));
      } else {
        attempts++;
        setTimeout(check, 100);
      }
    };
    
    check();
  });
}

// Inicializar Firebase quando dispon√≠vel
waitForFirebase().then(() => {
  console.log('üöÄ Inicializando Firebase App...');
  
  // Inicializar Firebase
  if (!firebase.apps.length) {
    firebase.initializeApp(firebaseConfig);
    console.log('‚úÖ Firebase App inicializado');
  }
  
  // Obter inst√¢ncias dos servi√ßos
  const db = firebase.firestore();
  const auth = firebase.auth();
  
  console.log('üîó Servi√ßos Firebase obtidos');
  
  // Teste de conectividade com o Firestore
  db.collection('test_connection').doc('ping')
    .set({ timestamp: firebase.firestore.FieldValue.serverTimestamp() })
    .then(() => console.log('‚úÖ Teste de conectividade com Firestore bem-sucedido'))
    .catch(err => console.error('‚ùå Erro de conectividade com Firestore:', err));

  // Criar objeto FirebaseDB global
  window.FirebaseDB = {
    // Inicializar autentica√ß√£o an√¥nima
    async initAuth() {
      try {
        console.log('üîê Iniciando autentica√ß√£o an√¥nima...');
        const userCredential = await auth.signInAnonymously();
        console.log('‚úÖ Autentica√ß√£o bem-sucedida:', userCredential.user.uid);
        return userCredential.user;
      } catch (error) {
        console.error('‚ùå Erro na autentica√ß√£o:', error);
        throw error;
      }
    },

    // Salvar configura√ß√£o da rifa
    async saveConfig(config) {
      try {
        console.log('üíæ Salvando configura√ß√£o...', config);
        const docRef = firebase.firestore().collection('rifa_config').doc('main');
        await docRef.set(config, { merge: true });
        console.log('‚úÖ Configura√ß√£o salva');
        return { success: true };
      } catch (error) {
        console.error('‚ùå Erro ao salvar configura√ß√£o:', error);
        return { success: false, error: error.message };
      }
    },

    // Carregar configura√ß√£o da rifa
    async loadConfig() {
      try {
        console.log('üìñ Carregando configura√ß√£o...');
        const docRef = firebase.firestore().collection('rifa_config').doc('main');
        const doc = await docRef.get();
        
        if (doc.exists) {
          console.log('‚úÖ Configura√ß√£o carregada');
          return { success: true, data: doc.data() };
        } else {
          console.log('‚ö†Ô∏è Configura√ß√£o n√£o encontrada');
          return { success: false, error: 'Configura√ß√£o n√£o encontrada' };
        }
      } catch (error) {
        console.error('‚ùå Erro ao carregar configura√ß√£o:', error);
        return { success: false, error: error.message };
      }
    },

    // Salvar compra
    async savePurchase(purchaseData) {
      try {
        console.log('üõí Salvando compra...', purchaseData);
        
        // Adicionar timestamp
        purchaseData.timestamp = firebase.firestore.FieldValue.serverTimestamp();
        purchaseData.status = 'pending';
        
        const docRef = await firebase.firestore().collection('purchases').add(purchaseData);
        console.log('‚úÖ Compra salva com ID:', docRef.id);
        
        return { success: true, id: docRef.id };
      } catch (error) {
        console.error('‚ùå Erro ao salvar compra:', error);
        return { success: false, error: error.message };
      }
    },

    // Carregar compras
    async loadPurchases() {
      try {
        console.log('üìã Carregando compras...');
        const snapshot = await firebase.firestore()
          .collection('purchases')
          .orderBy('timestamp', 'desc')
          .get();
        
        const purchases = [];
        snapshot.forEach(doc => {
          const docData = doc.data();
          purchases.push({
            id: doc.id,
            ...docData
          });
          
          // Log detalhado para debug inicial
          console.log(`üìã Compra carregada ${doc.id}:`, {
            status: docData.status,
            numbers: docData.numbers,
            buyerName: docData.buyerName
          });
        });
        
        console.log(`‚úÖ ${purchases.length} compras carregadas com ordena√ß√£o`);
        return { success: true, data: purchases };
      } catch (error) {
        console.error('‚ùå Erro ao carregar compras:', error);
        return { success: false, error: error.message };
      }
    },

    // Atualizar status da compra
    async updatePurchaseStatus(purchaseId, status, additionalData = {}) {
      try {
        console.log(`üîÑ Atualizando compra ${purchaseId} para ${status}...`);
        const docRef = firebase.firestore().collection('purchases').doc(purchaseId);
        await docRef.update({ 
          status: status,
          ...additionalData,
          updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        console.log('‚úÖ Status atualizado');
        return { success: true };
      } catch (error) {
        console.error('‚ùå Erro ao atualizar status:', error);
        return { success: false, error: error.message };
      }
    },

    // Atualizar dados da compra (para migra√ß√£o)
    async updatePurchase(purchaseId, updateData) {
      try {
        console.log(`üîÑ Atualizando compra ${purchaseId}...`, updateData);
        const docRef = firebase.firestore().collection('purchases').doc(purchaseId);
        await docRef.update({ 
          ...updateData,
          updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        console.log('‚úÖ Compra atualizada');
        return { success: true };
      } catch (error) {
        console.error('‚ùå Erro ao atualizar compra:', error);
        return { success: false, error: error.message };
      }
    },

    // Escutar mudan√ßas em tempo real
    listenToChanges(collection, callback) {
      try {
        console.log(`üëÇ Escutando mudan√ßas em: ${collection}`);
        const unsubscribe = firebase.firestore()
          .collection(collection)
          .orderBy('timestamp', 'desc') // Ordenar por timestamp para consist√™ncia
          .onSnapshot(snapshot => {
            console.log(`üì• Snapshot recebido: ${snapshot.size} documentos`);
            const data = [];
            
            snapshot.forEach(doc => {
              const docData = doc.data();
              data.push({
                id: doc.id,
                ...docData
              });
              
              // Log detalhado para debug
              console.log(`üìã Doc ${doc.id}:`, {
                status: docData.status,
                numbers: docData.numbers,
                buyerName: docData.buyerName
              });
            });
            
            console.log(`üîÑ Chamando callback com ${data.length} itens`);
            callback(data);
          }, error => {
            console.error('‚ùå Erro no listener:', error);
            // Tentar reconectar em caso de erro
            setTimeout(() => {
              console.log('üîÑ Tentando reconectar listener...');
              this.listenToChanges(collection, callback);
            }, 5000);
          });
        
        console.log('‚úÖ Listener configurado com ordena√ß√£o e error handling');
        return unsubscribe;
      } catch (error) {
        console.error('‚ùå Erro ao configurar listener:', error);
        return null;
      }
    },

    // Verificar se n√∫mero est√° dispon√≠vel
    async isNumberAvailable(number) {
      try {
        const snapshot = await firebase.firestore()
          .collection('purchases')
          .where('numbers', 'array-contains', number)
          .where('status', 'in', ['confirmed', 'pending'])
          .get();
        
        return snapshot.empty;
      } catch (error) {
        console.error('‚ùå Erro ao verificar n√∫mero:', error);
        return false;
      }
    },

    // Obter estat√≠sticas
    async getStats() {
      try {
        const snapshot = await firebase.firestore()
          .collection('purchases')
          .where('status', '==', 'confirmed')
          .get();
        
        let totalSold = 0;
        let totalRevenue = 0;
        
        snapshot.forEach(doc => {
          const data = doc.data();
          totalSold += data.numbers ? data.numbers.length : 0;
          totalRevenue += data.totalAmount || 0;
        });
        
        return {
          success: true,
          data: {
            totalSold,
            totalRevenue,
            totalPurchases: snapshot.size
          }
        };
      } catch (error) {
        console.error('‚ùå Erro ao obter estat√≠sticas:', error);
        return { success: false, error: error.message };
      }
    },

    // ========== FUN√á√ïES DE ADMINISTRA√á√ÉO ==========
    
    // Email do √∫nico administrador permitido
    ADMIN_AUTORIZADO: 'admin@rifathomas.com',
    
    // Criar conta de administrador (RESTRITO)
    async createAdmin(email, password) {
      try {
        console.log('üë§ Tentando criar conta de administrador...', email);
        
        // VERIFICAR SE √â O EMAIL AUTORIZADO
        if (email !== this.ADMIN_AUTORIZADO) {
          console.log('‚ùå Email n√£o autorizado:', email);
          return { 
            success: false, 
            error: 'Apenas o administrador autorizado pode ter uma conta. Contate o respons√°vel.' 
          };
        }
        
        // Verificar se j√° existe um admin cadastrado
        const existingAdmins = await firebase.firestore()
          .collection('admin_users')
          .where('isAdmin', '==', true)
          .get();
        
        if (!existingAdmins.empty) {
          // Se j√° existe um admin, verificar se √© o email correto
          let isCorrectAdmin = false;
          existingAdmins.forEach(doc => {
            if (doc.data().email === this.ADMIN_AUTORIZADO) {
              isCorrectAdmin = true;
            }
          });
          
          if (isCorrectAdmin) {
            console.log('‚ö†Ô∏è Admin autorizado j√° existe');
            return { 
              success: false, 
              error: 'Conta de administrador j√° existe. Use a op√ß√£o de login.' 
            };
          } else {
            // Limpar admins n√£o autorizados
            console.log('üßπ Removendo admins n√£o autorizados...');
            const batch = firebase.firestore().batch();
            existingAdmins.forEach(doc => {
              batch.delete(doc.ref);
            });
            await batch.commit();
          }
        }
        
        // Criar usu√°rio no Firebase Auth
        const userCredential = await auth.createUserWithEmailAndPassword(email, password);
        const user = userCredential.user;
        
        // Marcar usu√°rio como admin no Firestore
        await firebase.firestore().collection('admin_users').doc(user.uid).set({
          email: email,
          isAdmin: true,
          isAuthorized: true,
          createdAt: firebase.firestore.FieldValue.serverTimestamp(),
          lastLogin: null
        });
        
        console.log('‚úÖ Admin autorizado criado:', user.uid);
        return { success: true, user: user };
      } catch (error) {
        console.error('‚ùå Erro ao criar conta de administrador:', error);
        
        // Se o usu√°rio j√° existe no Auth, tentar fazer login
        if (error.code === 'auth/email-already-in-use') {
          console.log('‚ö†Ô∏è Email j√° existe no Auth, tentando login...');
          return await this.adminLogin(email, password);
        }
        
        return { success: false, error: error.message };
      }
    },

    // Login de administrador (RESTRITO)
    async adminLogin(email, password) {
      try {
        console.log('üîê Fazendo login de administrador...', email);
        
        // VERIFICAR SE √â O EMAIL AUTORIZADO
        if (email !== this.ADMIN_AUTORIZADO) {
          console.log('‚ùå Login n√£o autorizado:', email);
          return { 
            success: false, 
            error: 'Acesso negado. Apenas o administrador autorizado pode fazer login.' 
          };
        }
        
        // Fazer login no Firebase Auth
        const userCredential = await auth.signInWithEmailAndPassword(email, password);
        const user = userCredential.user;
        
        // Verificar se o usu√°rio tem registro como admin autorizado
        const adminDoc = await firebase.firestore().collection('admin_users').doc(user.uid).get();
        
        if (!adminDoc.exists) {
          // Se n√£o existe registro, criar automaticamente
          await firebase.firestore().collection('admin_users').doc(user.uid).set({
            email: email,
            isAdmin: true,
            isAuthorized: true,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            lastLogin: firebase.firestore.FieldValue.serverTimestamp()
          });
          console.log('‚úÖ Registro de admin criado automaticamente');
        } else {
          // Atualizar √∫ltimo login
          await firebase.firestore().collection('admin_users').doc(user.uid).update({
            lastLogin: firebase.firestore.FieldValue.serverTimestamp(),
            isAuthorized: true // Garantir que est√° marcado como autorizado
          });
        }
        
        console.log('‚úÖ Login de administrador autorizado realizado:', user.uid);
        return { success: true, user: user };
      } catch (error) {
        console.error('‚ùå Erro no login de administrador:', error);
        
        // Personalizar mensagens de erro
        let errorMessage = error.message;
        if (error.code === 'auth/user-not-found') {
          errorMessage = 'Usu√°rio n√£o encontrado';
        } else if (error.code === 'auth/wrong-password') {
          errorMessage = 'Senha incorreta';
        } else if (error.code === 'auth/invalid-email') {
          errorMessage = 'Email inv√°lido';
        } else if (error.code === 'auth/too-many-requests') {
          errorMessage = 'Muitas tentativas. Tente novamente mais tarde';
        }
        
        return { success: false, error: errorMessage };
      }
    },

    // Verificar se usu√°rio √© administrador (COM VERIFICA√á√ÉO DE AUTORIZA√á√ÉO)
    async isAdmin(uid) {
      try {
        console.log('üîç Verificando se usu√°rio √© admin autorizado...', uid);
        
        const docRef = firebase.firestore().collection('admin_users').doc(uid);
        const doc = await docRef.get();
        
        if (doc.exists) {
          const data = doc.data();
          
          // Verificar se √© admin E se √© autorizado E se tem o email correto
          const isAdmin = data.isAdmin === true;
          const isAuthorized = data.isAuthorized === true;
          const hasCorrectEmail = data.email === this.ADMIN_AUTORIZADO;
          
          const isValidAdmin = isAdmin && isAuthorized && hasCorrectEmail;
          
          console.log(`‚úÖ Verifica√ß√£o de admin: isAdmin=${isAdmin}, isAuthorized=${isAuthorized}, correctEmail=${hasCorrectEmail}, valid=${isValidAdmin}`);
          
          // Se n√£o √© autorizado ou n√£o tem email correto, remover da cole√ß√£o
          if (isAdmin && (!isAuthorized || !hasCorrectEmail)) {
            console.log('üßπ Removendo admin n√£o autorizado...');
            await docRef.delete();
            return false;
          }
          
          return isValidAdmin;
        } else {
          console.log('‚ö†Ô∏è Usu√°rio n√£o encontrado na cole√ß√£o admin_users');
          return false;
        }
      } catch (error) {
        console.error('‚ùå Erro ao verificar admin:', error);
        return false;
      }
    },

    // Logout de administrador
    async adminLogout() {
      try {
        console.log('üö™ Fazendo logout de administrador...');
        await auth.signOut();
        console.log('‚úÖ Logout realizado');
        return { success: true };
      } catch (error) {
        console.error('‚ùå Erro no logout:', error);
        return { success: false, error: error.message };
      }
    },

    // Verificar se h√° admin autenticado
    async getCurrentAdmin() {
      try {
        console.log('üîç Verificando admin atual...');
        
        // Verificar se Auth est√° inicializado
        if (!firebase.auth()) {
          console.error('‚ùå Firebase Auth n√£o inicializado');
          return { success: false, error: 'Firebase Auth n√£o est√° dispon√≠vel' };
        }
        
        // Aguardar o estado de autentica√ß√£o ser resolvido com timeout
        const user = await Promise.race([
          new Promise((resolve) => {
            const unsubscribe = firebase.auth().onAuthStateChanged((user) => {
              unsubscribe();
              resolve(user);
            });
          }),
          new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout na verifica√ß√£o de autentica√ß√£o')), 5000))
        ]).catch(error => {
          console.error('‚è±Ô∏è Timeout ou erro na verifica√ß√£o de auth:', error);
          return null;
        });
        
        if (user) {
          console.log(`‚úì Usu√°rio encontrado: ${user.email} (${user.uid})`);
          try {
            const isAdmin = await this.isAdmin(user.uid);
            
            if (isAdmin) {
              console.log('‚úì Usu√°rio confirmado como admin');
              return { success: true, user: user, isAdmin: true };
            } else {
              console.log('‚úó Usu√°rio n√£o tem permiss√µes de admin');
              return { success: false, error: 'Usu√°rio n√£o tem permiss√µes de administrador' };
            }
          } catch (adminError) {
            console.error('‚ùå Erro ao verificar permiss√µes de admin:', adminError);
            return { success: false, error: 'Falha ao verificar permiss√µes de admin: ' + adminError.message };
          }
        } else {
          console.log('‚úó Nenhum usu√°rio autenticado');
          return { success: false, error: 'Nenhum administrador autenticado' };
        }
      } catch (error) {
        console.error('‚ùå Erro ao verificar admin atual:', error);
        return { success: false, error: error.message };
      }
    },

    // Listar todos os administradores
    async listAdmins() {
      try {
        console.log('üìã Listando administradores...');
        const snapshot = await firebase.firestore()
          .collection('admin_users')
          .where('isAdmin', '==', true)
          .orderBy('createdAt', 'desc')
          .get();
        
        const admins = [];
        snapshot.forEach(doc => {
          admins.push({
            id: doc.id,
            ...doc.data()
          });
        });
        
        console.log(`‚úÖ ${admins.length} administradores encontrados`);
        return { success: true, data: admins };
      } catch (error) {
        console.error('‚ùå Erro ao listar administradores:', error);
        return { success: false, error: error.message };
      }
    },

    // Limpar todos os admins n√£o autorizados (FUN√á√ÉO DE SEGURAN√áA)
    async cleanUnauthorizedAdmins() {
      try {
        console.log('üßπ Limpando administradores n√£o autorizados...');
        
        const snapshot = await firebase.firestore()
          .collection('admin_users')
          .get();
        
        const batch = firebase.firestore().batch();
        let removedCount = 0;
        
        snapshot.forEach(doc => {
          const data = doc.data();
          const email = data.email;
          
          // Remover se n√£o for o email autorizado
          if (email !== this.ADMIN_AUTORIZADO) {
            console.log(`üóëÔ∏è Removendo admin n√£o autorizado: ${email}`);
            batch.delete(doc.ref);
            removedCount++;
          }
        });
        
        if (removedCount > 0) {
          await batch.commit();
          console.log(`‚úÖ ${removedCount} admin(s) n√£o autorizado(s) removido(s)`);
        } else {
          console.log('‚úÖ Nenhum admin n√£o autorizado encontrado');
        }
        
        return { success: true, removed: removedCount };
      } catch (error) {
        console.error('‚ùå Erro ao limpar admins n√£o autorizados:', error);
        return { success: false, error: error.message };
      }
    }
  };
  
  console.log('üéâ FirebaseDB configurado e dispon√≠vel globalmente');
  
  // Trigger evento personalizado para informar que Firebase est√° pronto
  window.dispatchEvent(new CustomEvent('firebaseReady', { 
    detail: { firebaseDB: window.FirebaseDB } 
  }));
  
}).catch(error => {
  console.error('‚ùå Erro ao inicializar Firebase:', error);
  
  // Criar vers√£o mock para desenvolvimento
  window.FirebaseDB = {
    ADMIN_AUTORIZADO: 'admin@rifathomas.com',
    initAuth: async () => ({ uid: 'mock-user' }),
    saveConfig: async () => ({ success: false, error: 'Firebase n√£o dispon√≠vel' }),
    loadConfig: async () => ({ success: false, error: 'Firebase n√£o dispon√≠vel' }),
    savePurchase: async () => ({ success: false, error: 'Firebase n√£o dispon√≠vel' }),
    loadPurchases: async () => ({ success: false, error: 'Firebase n√£o dispon√≠vel' }),
    updatePurchaseStatus: async () => ({ success: false, error: 'Firebase n√£o dispon√≠vel' }),
    listenToChanges: () => null,
    isNumberAvailable: async () => true,
    getStats: async () => ({ success: false, error: 'Firebase n√£o dispon√≠vel' }),
    // Fun√ß√µes de administra√ß√£o (mock)
    createAdmin: async () => ({ success: false, error: 'Firebase n√£o dispon√≠vel' }),
    adminLogin: async () => ({ success: false, error: 'Firebase n√£o dispon√≠vel' }),
    isAdmin: async () => false,
    adminLogout: async () => ({ success: false, error: 'Firebase n√£o dispon√≠vel' }),
    getCurrentAdmin: async () => ({ success: false, error: 'Firebase n√£o dispon√≠vel' }),
    listAdmins: async () => ({ success: false, error: 'Firebase n√£o dispon√≠vel' }),
    cleanUnauthorizedAdmins: async () => ({ success: false, error: 'Firebase n√£o dispon√≠vel' })
  };
  
  console.log('‚ö†Ô∏è Usando vers√£o mock do FirebaseDB');
});
